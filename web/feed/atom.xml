<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>kpacha</title>
    <subtitle>Hacking around</subtitle>
    <link href="http://kpacha.github.io/feed/index.atom" rel="self" />
    <link href="http://kpacha.github.io/" />
        <id>http://kpacha.github.io/</id>
            <updated>2014-10-26T00:00:00+02:00</updated>
            <entry>
        <title>Building a simple static blog with carew</title>
                <id>http://kpacha.github.io/2014/01/12/building-a-simple-static-blog-with-carew.html</id>
                <updated>2014-01-12T00:00:00+01:00</updated>
        <author>
            <name>kpacha</name>
            <email>kpacha666@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://kpacha.github.io/2014/01/12/building-a-simple-static-blog-with-carew.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>I think the best topic for a first post must be 'how did I build this?', so here we go!</p>

<p>First of all, as I want my blog be served at github pages, I create a new repo name kpacha.github.io. I know the <a href="http://carew.github.io/cookbook/hosting.html">cookbook</a> recomends an easier way, but I don't want the carew installation on my <code>master</code> branch so, my repo has two branches:</p>

<ul><li>The <code>master</code> branch stores the last static website builded as it's intended to serve the web contents for github pages</li>
<li>The <code>editor</code> branch stores the carew project and all the markdown pages</li>
</ul><p>So the workflow I'm following here is quite simple:</p>

<ul><li>checkout the <code>editor</code> branch</li>
<li>create new post</li>
<li>re-build website</li>
<li>commit changes</li>
<li>merge the new website to <code>master</code></li>
<li>commit changes</li>
<li>push both branches</li>
</ul><h2 id="initial-setup">Initial setup<a href="#initial-setup" class="anchor">#</a></h2>

<p>Create a new github repo named <code>&lt;YOUR-GITHUB-USER&gt;.github.io</code> and clone it somewhere in your system</p>

<pre><code>$ git clone https://github.com/&lt;YOUR-GITHUB-USER&gt;/&lt;YOUR-GITHUB-USER&gt;.github.io.git
$ cd &lt;YOUR-GITHUB-USER&gt;.github.io
</code></pre>

<h2 id="editor-branch">Editor branch<a href="#editor-branch" class="anchor">#</a></h2>

<p>Create your <code>editor</code> branch just typing</p>

<pre><code>$ git checkout -b editor
</code></pre>

<h3 id="carew-installation">Carew Installation<a href="#carew-installation" class="anchor">#</a></h3>

<p>The best way to start with carew is to use the carew boilerplate: You will need composer.</p>

<pre><code>$ php composer.phar create-project carew/boilerplate . -s dev
$ bin/carew build
</code></pre>

<p>That's all, you can browse the <code>web/</code> directory.</p>

<p>Now you must edit the <code>confi.yml</code> and the <code>posts/</code> and <code>pages/</code> folder contents.</p>

<h3 id="git-integration">Git integration<a href="#git-integration" class="anchor">#</a></h3>

<p>Once your <code>editor</code> branch has a carew project working, it's time to integrate it in your workflow. It could be done just by adding two more files to the <code>editor</code> branch: <code>.gitignore</code> and <code>install</code>.</p>

<p><code>.gitignore</code> will prevent you from adding the <code>bin/</code> and <code>vendor/</code> folders</p>

<pre><code>/vendor/
/bin/
</code></pre>

<p>Also, <code>install</code> will be useful when you want to install your <code>editor</code> environment after a <code>git clone</code></p>

<pre><code>#!/bin/bash
composer install -o
bin/carew build
</code></pre>

<p>Remeber to add execution permisions</p>

<pre><code>chmod +x install
</code></pre>

<p>Now you can add the root folder into git.</p>

<p>In future checkouts from scratch, you will need to run the <code>install</code> script before be ready to work!</p>

<pre><code>$ git clone https://github.com/kpacha/kpacha.github.io.git
$ git checkout editor
$ ./install
</code></pre>

<h2 id="master-branch">Master branch<a href="#master-branch" class="anchor">#</a></h2>

<p>Checkout your <code>master</code> branch</p>

<pre><code>$ git checkout master
</code></pre>

<p>And add the <code>.gitignore</code> file from the <code>editor</code> branch</p>

<pre><code>$ git checkout editor -- .gitignore
</code></pre>

<p>Create a file called <code>update.sh</code></p>

<pre><code>#!/bin/bash
git checkout editor -- web
cp -rp web/* .
rm -rf web
git reset HEAD web
git status
</code></pre>

<p>After adding the execution permissions to <code>update.sh</code>, add them to git</p>

<pre><code>$ chmod +x update.sh
$ git add .gitignore update.sh
$ git commit -m "set up the master branch"
</code></pre>

<p>Now, every time you want to push your generated statics you must run the <code>update.sh</code> script, add the untracked files listed, commit them and push the branch to github</p>

<h2 id="posting">Posting<a href="#posting" class="anchor">#</a></h2>

<p>From the <code>editor</code> branch, create your post entry</p>

<pre><code>$ bin/carew generate:post "New post title"
</code></pre>

<p>Edit your entry and rebuild your web</p>

<pre><code>$ bin/carew build
</code></pre>

<p>Now it's time to commit your changes into your <code>editor</code> branch and update your <code>master</code> one. Just type</p>

<pre><code>$ git add .
$ git commit -m "adding the 'New post title'"
$ git checkout master
$ ./update.sh
$ git add .
$ git commit -m "publishing the 'New post title'"
$ git push origin editor
$ git push origin master
</code></pre>

<p>And you're done!</p>

<h2 id="extra-tip">Extra tip<a href="#extra-tip" class="anchor">#</a></h2>

<p>Put the code for posting in a script for faster publishing. Let's call it <code>publish</code></p>

<pre><code>#!/bin/bash
git add .
git commit -m "adding the '$1'"
git checkout master
./update.sh
git add .
git commit -m "publishing the '$1'"
git push origin editor
git push origin master
</code></pre>

<p>Do not forget to set the execution permisions</p>

<pre><code>$ chmod +x publish
</code></pre>

<p>And, after a succesful build, just run</p>

<pre><code>$ ./publish "New post title"
</code></pre>]]></content>
    </entry>
        <entry>
        <title>Improving the css/js compression process</title>
                <id>http://kpacha.github.io/2014/02/14/improving-the-css-js-compression-process.html</id>
                <updated>2014-02-14T00:00:00+01:00</updated>
        <author>
            <name>kpacha</name>
            <email>kpacha666@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://kpacha.github.io/2014/02/14/improving-the-css-js-compression-process.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Everybody in the web business knows that deploying uncompressed css/js files is a bad idea. It is a waste of time and money since storage and bandwith usually are not free resources (this web is a clear exception, so here I do not care too much). And the website will take more time to get fully rendered. So people use tools like <a href="http://yui.github.io/yuicompressor/">yui-compressor</a> in order to minify their css and javascript files. But adding those compressed files to the SCM tool does not feel right because there is no way to know if the compressed files are up to date with the uncompressed version. The solution is compress those files just before deploying a new version.</p>

<p>This aproach is fine if you are deploying a pre-builded package to your servers. But, what if you are just checking out the code from your SCM? In this scenario, you will need to install your compressing tool (with all its requirements) in every server and trigger the compression process after the checkout. Why would you spend so much time doing the same operation again and again? Are your files different from one host to another or are they almost the same? How often do you deploy? Just take the DRY pattern to the next abstraction level and delegate that process to a dedicated service!</p>

<p>Here <a href="http://kpacha.github.io/yuicompressor-server/">yuicompressor-server</a> comes up. Since yui-compressor is the most adopted compression tool and since it is a FOSS java project, it sounds good to me to bundle the jar with a lightweight http service and centralize the locally installed compression tool in a dedicated server. This solution gives some extra benefits:</p>

<ul><li><em>Less software requirements on the app servers</em>. If they are running a pure php-based app, why should they require a jdk?</li>
<li><em>More resource reutilization</em> since you are instantiating less compressors... And there is a single jvm in a dedicated and customized server!</li>
<li><em>Fault tolerance</em>. Just launch a set of yuicompressor-server hosts and add them to your deployment process. This HA configuration removes any SPOF (single point of failure) and improves the service continuation because the probability of unsuccesful deployments due errors (related to the compression processes and results) is almost zero.</li>
<li><em>Cachable responses for free</em>. It is a http service so you can use the cache headers and any network intermediary will cache your responses. Also, you can place a front-end cache (dedicated or embedded) and reduce the response time and server load. <a href="https://www.varnish-cache.org/">Varnish</a> and <a href="http://ehcache.org/">Ehcache</a> are your friends... but are you really generating so much requests?</li>
</ul><p>Finally, you will end with a faster deployment process and an easier infraestructure.</p>

<p>For the http service, I choose an embedded <a href="http://www.eclipse.org/jetty/">jetty</a>. I discovered it some time ago playing with the <a href="http://www.ninjaframework.org/">ninja framework</a> and I love it. It gets a well tested, very stable and pretty fast http server. And it is as easy to use that it requires just few lines of code to get it running!</p>

<p>The yuicompressor-server is not the best solution but it is the next baby-step in the continuous improvement process. It is the small hop you make to get things running better without any big, risky change. Some day in the future, your CI server will handle the css/js compression task before packaging a release and deploy it. Then, after celebrating your new achivement in the long road to the perfect processes and the leanest environment, you will be able to shutdown your compressor server and forget it. Until that happy day, why should you be doing nothing to improve your daily work?</p>

<p>Read more about <a href="http://kpacha.github.io/yuicompressor-server/">yuicompressor-server</a> or inspect the <a href="http://github.com/kpacha/yuicompressor-server/">code</a></p>]]></content>
    </entry>
        <entry>
        <title>Discovering your services with ZooKeeper</title>
                <id>http://kpacha.github.io/2014/10/18/discovering-your-services-with-zookeeper.html</id>
                <updated>2014-10-18T00:00:00+02:00</updated>
        <author>
            <name>kpacha</name>
            <email>kpacha666@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://kpacha.github.io/2014/10/18/discovering-your-services-with-zookeeper.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the first of a several articles I am planing to write about service discovering in PHP environments, so let's start it.</p>

<h2>The problem</h2>

<p>Almost all apps needs to interact with external services (like databases or REST services). It's a fact. And they need some way to identify those services and the nodes that conform them. Usually, you put this info in a config file and your code just reads that file in order to know the database connection details.</p>

<p>The naive aproach described in the previous block has an important cons: it does not scale because every update requires a new deployment (due you're mixing code with configuration) of all the affected node (all the services depending on the updated ones)</p>

<h2>The solution</h2>

<p>As the <a href="http://zookeeper.apache.org/">official website</a> says: <em>"ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services"</em>. Why don't we delegate all the hard work to it?</p>

<p>ZooKeeper is a very raw tool, so I'd rather go with the <a href="http://curator.apache.org/index.html">Curator</a> framework. It comes with a lot of recipes already implemented. Also, it has two very interesting extensions: 'Service Discovering' and 'Service Discovering Server'.</p>

<p>The 'Service Discovering' system provides a mechanism for:</p>

<ul>
<li>Services to register their availability</li>
<li>Locating a single instance of a particular service</li>
<li>Notifying when the instances of a service change</li>
</ul>

<p>The 'Service Discovery Server' bridges non-Java or legacy applications with the Curator Service Discovery exposing RESTful web services to register, remove, query, etc. services.</p>

<p>The architecture is simple: some ZooKeeper nodes will be the backend of the autodiscovering system and the frontend nodes will host an implementation of the 'Service Discovery Server'. Clients will interact with the frontend nodes using a simple curl-based sdk.</p>

<h2>REST server implementation</h2>

<p>The Curator website says <em>"The Service Discovery Server provides JAX-RS components that can be incorporated into a container of your choice (Tomcat, Jetty, etc.). You can also choose any JAX-RS provider (Jersey, RESTEasy, etc.)."</em>. So let's try to create a simple jetty-based server exposing the JAX-RS components.</p>

<p>The first step is defining the project dependencies. Using the well-known maven project definition file, we must require the <code>curator-x-service-discovery</code>, the <code>jetty-servlet</code>, the <code>jersey-servlet</code> and the <code>jersey-core</code>. Also, we should configure the <code>exec-maven-plugin</code> and the <code>maven-assembly-artifact</code> in order to buld an executable fat-jar.</p>

<pre><code>    &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
        &lt;groupId&gt;com.github.kpacha&lt;/groupId&gt;
        &lt;artifactId&gt;suricate&lt;/artifactId&gt;
        &lt;version&gt;0.0.2-SNAPSHOT&lt;/version&gt;

        &lt;properties&gt;
                &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
                &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
                &lt;jetty.version&gt;9.1.1.v20140108&lt;/jetty.version&gt;
                &lt;jersey.version&gt;1.11&lt;/jersey.version&gt;
                &lt;commons-cli.version&gt;1.2&lt;/commons-cli.version&gt;
                &lt;maven-compiler-plugin.version&gt;2.3.2&lt;/maven-compiler-plugin.version&gt;
                &lt;jdk.version&gt;1.7&lt;/jdk.version&gt;
        &lt;/properties&gt;

        &lt;dependencies&gt;
                &lt;dependency&gt;
                        &lt;groupId&gt;com.netflix.curator&lt;/groupId&gt;
                        &lt;artifactId&gt;curator-x-discovery-server&lt;/artifactId&gt;
                        &lt;version&gt;1.3.3&lt;/version&gt;
                &lt;/dependency&gt;

                &lt;dependency&gt;
                        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
                        &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt;
                        &lt;version&gt;${jetty.version}&lt;/version&gt;
                &lt;/dependency&gt;

                &lt;dependency&gt;
                        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
                        &lt;artifactId&gt;jersey-servlet&lt;/artifactId&gt;
                        &lt;version&gt;${jersey.version}&lt;/version&gt;
                &lt;/dependency&gt;

                &lt;dependency&gt;
                        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
                        &lt;artifactId&gt;jersey-core&lt;/artifactId&gt;
                        &lt;version&gt;${jersey.version}&lt;/version&gt;
                &lt;/dependency&gt;

                &lt;dependency&gt;
                        &lt;groupId&gt;commons-cli&lt;/groupId&gt;
                        &lt;artifactId&gt;commons-cli&lt;/artifactId&gt;
                        &lt;version&gt;${commons-cli.version}&lt;/version&gt;
                &lt;/dependency&gt;
        &lt;/dependencies&gt;
        &lt;build&gt;
                &lt;plugins&gt;
                        &lt;plugin&gt;
                                &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
                                &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
                                &lt;version&gt;${jetty.version}&lt;/version&gt;
                        &lt;/plugin&gt;

                        &lt;plugin&gt;
                                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
                                &lt;version&gt;1.1&lt;/version&gt;
                                &lt;executions&gt;
                                        &lt;execution&gt;
                                                &lt;goals&gt;
                                                        &lt;goal&gt;java&lt;/goal&gt;
                                                &lt;/goals&gt;
                                        &lt;/execution&gt;
                                &lt;/executions&gt;
                                &lt;configuration&gt;
                                        &lt;mainClass&gt;com.github.kpacha.suricate.Suricate&lt;/mainClass&gt;
                                &lt;/configuration&gt;
                        &lt;/plugin&gt;

                        &lt;plugin&gt;
                                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
                                &lt;version&gt;2.4&lt;/version&gt;
                                &lt;configuration&gt;
                                        &lt;descriptorRefs&gt;
                                                &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
                                        &lt;/descriptorRefs&gt;
                                        &lt;archive&gt;
                                                &lt;manifest&gt;
                                                        &lt;mainClass&gt;com.github.kpacha.suricate.Suricate&lt;/mainClass&gt;
                                                &lt;/manifest&gt;
                                        &lt;/archive&gt;
                                &lt;/configuration&gt;
                        &lt;/plugin&gt;

                        &lt;plugin&gt;
                                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                                &lt;version&gt;${maven-compiler-plugin.version}&lt;/version&gt;
                                &lt;configuration&gt;
                                        &lt;source&gt;${jdk.version}&lt;/source&gt;
                                        &lt;target&gt;${jdk.version}&lt;/target&gt;
                                &lt;/configuration&gt;
                        &lt;/plugin&gt;
                &lt;/plugins&gt;
        &lt;/build&gt;
    &lt;/project&gt;
</code></pre>

<p>Next, we must create a StringDiscoveryResource extending DiscoveryResource to bind the path "/" to the ContextResolver. Not funny at all.</p>

<pre><code>@Path("/")
public class StringDiscoveryResource extends DiscoveryResource&lt;String&gt; {
    public StringDiscoveryResource(
            @Context ContextResolver&lt;DiscoveryContext&lt;String&gt;&gt; resolver) {
        super(resolver.getContext(DiscoveryContext.class));
    }
}
</code></pre>

<p>Now we need to create an Application and set-up the curator framework and the service discovery. The curator framework will setup the connection to the ZooKeeper server. The <code>ExponentialBackoffRetry</code> strategy is the recomended one here.</p>

<pre><code>CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(
        configuration.getZkConnection(), new ExponentialBackoffRetry(
                1000, 3));
curatorFramework.start();
</code></pre>

<p>The Application also requires a service discovery instance from the curator framework</p>

<pre><code>ServiceDiscovery&lt;String&gt; serviceDiscovery = new ServiceDiscoveryImpl&lt;String&gt;(
        curatorFramework, configuration.getZkBasePath(),
        new JsonInstanceSerializer&lt;String&gt;(String.class), null);
</code></pre>

<p>Our StringDiscoveryContext has to be instantiate too</p>

<pre><code>context = new StringDiscoveryContext(serviceDiscovery,
        new RandomStrategy&lt;String&gt;(),
        configuration.getInstanceCleanupMillis());
</code></pre>

<p>And the thread responsible for cleaning up the evicted STATIC nodes</p>

<pre><code>instanceCleanup = new InstanceCleanup(serviceDiscovery,
        configuration.getInstanceCleanupMillis());
instanceCleanup.start();
</code></pre>

<p>Since we want to work with json encoded payloads, we must set up the json service instance marshaller</p>

<pre><code>serviceInstanceMarshaller = new JsonServiceInstanceMarshaller&lt;String&gt;(context);
serviceInstancesMarshaller = new JsonServiceInstancesMarshaller&lt;String&gt;(context);
</code></pre>

<p>After playing with very boring stuff like the getSingletons() implementation and registering the StringDiscoveringResource, the <a href="https://github.com/kpacha/suricate/blob/master/src/main/java/com/github/kpacha/suricate/Application.java">Application</a> comes out.</p>

<p>Time to coordinate the Application with the JettyServer! Pass the injected Application to the ServletContainer and register the context path and bind the servlet to the route "/*".</p>

<pre><code>public void run() throws Exception {
        ServletContainer container = new ServletContainer(app);

        server = new Server(port);

        ServletContextHandler context = new ServletContextHandler(
                ServletContextHandler.SESSIONS);
        context.setContextPath("/");
        server.setHandler(context);
        context.addServlet(new ServletHolder(container), "/*");

        server.start();
        server.join();
}
</code></pre>

<p>The final step is to create a Main class with the static main method to create the Application and run the JettyServer.</p>

<pre><code>public static void main(String[] args) throws Exception {
        Configuration config = new Configuration(args);
        JettyServer jetty = new JettyServer(new Application(config),
                config.getPort());
        jetty.run();
}
</code></pre>

<p>I am sure you have already detected I also created a <a href="https://github.com/kpacha/suricate/blob/master/src/main/java/com/github/kpacha/suricate/Configuration.java">Config</a> class to encapsulate all the command line manipulation, so the Application remains as client agnostic as possible.</p>

<p>The complete <a href="https://github.com/kpacha/suricate">suricate project</a> is available on github. If you do not want any further customization, it could get the job done!</p>

<h2>Setting up your environment</h2>

<p>In devel, you just need to get a single ZooKeeper server running. Check the <a href="http://zookeeper.apache.org/doc/trunk/zookeeperStarted.html">quick start help</a> to get it done. Once you have your config, just run</p>

<pre><code>$ /path/to/zk/$ bin/zkServer.sh start
JMX enabled by default
Using config: /home/kpacha/zookeeper/zookeeper-3.4.6/bin/../conf/zoo.cfg
Starting zookeeper ... STARTED
</code></pre>

<p>in production environments, you must think about what replication startegy fits you best. The complete documentation is <a href="http://zookeeper.apache.org/doc/trunk/zookeeperAdmin.html#sc_zkMulitServerSetup">here</a>. Remember to properly set up your suricate servers to we aware of the multiserver architecture you are using.</p>

<h2>Running the REST Server</h2>

<p>Follow <a href="https://github.com/kpacha/suricate#build-and-run-the-fat-jar">this instructions</a> to build the fat-jar and then start the suricate server with</p>

<pre><code>$ java -jar /path/to/suricate/target/suricate-0.0.2-SNAPSHOT-jar-with-dependencies.jar
 INFO [main] (Configuration.java:86) - Param [p]: 8080
 INFO [main] (Configuration.java:75) - Param [c]: 127.0.0.1:2181
 INFO [main] (Configuration.java:75) - Param [b]: /suricate/service-directory
 INFO [main] (Configuration.java:86) - Param [t]: 15000
DEBUG [main] (Application.java:35) - Curator framework started!
 WARN [ConnectionStateManager-0] (ConnectionStateManager.java:174) - There are no ConnectionStateListeners registered.
DEBUG [main] (Application.java:40) - ServiceDiscovery started!
DEBUG [main] (Application.java:45) - DiscoveryContext started!
DEBUG [main] (Application.java:50) - SuricateInstanceCleanup started!
DEBUG [main] (Application.java:56) - Json marshallers started!
oct 19, 2014 5:53:36 PM com.sun.jersey.server.impl.application.WebApplicationImpl _initiate
INFO: Initiating Jersey application, version 'Jersey: 1.11 12/09/2011 10:27 AM'
</code></pre>

<p>All the options are documented at the home of the project (https://github.com/kpacha/suricate#usage)</p>
]]></content>
    </entry>
        <entry>
        <title>Creating your sdk for suricate</title>
                <id>http://kpacha.github.io/2014/10/19/creating-your-sdk-for-suricate.html</id>
                <updated>2014-10-19T00:00:00+02:00</updated>
        <author>
            <name>kpacha</name>
            <email>kpacha666@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://kpacha.github.io/2014/10/19/creating-your-sdk-for-suricate.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>This is the second article of the <em>service discovering in PHP environments</em> serie. The <a href="../../../2014/10/18/discovering-your-services-with-zookeeper.html">
        first one
    </a> was about implementing a Curator Service Discovering REST Server. This will be about creating a simple sdk to provide a nice integration to the autodiscovering service to your clients.</p>

<h2 id="the-rest-interface">The REST interface<a href="#the-rest-interface" class="anchor">#</a></h2>

<p>The rest interface is defined in the homepage of the <a href="https://github.com/kpacha/suricate#usage">suricate project</a>.</p>

<p>TLDR? here goes the short version:</p>

<pre><code># Register the host 'ca2fff8e-d756-480c-b59e-8297ff88624b' in the cluster 'test'
$ curl -i -H "Accept: application/json" -H "Content-Type: application/json" -X PUT -d '{"name": "test", "id": "ca2fff8e-d756-480c-b59e-8297ff88624b", "address": "10.20.30.40", "port": 1234, "payload": "supu", "registrationTimeUTC": 1325129459728, "serviceType": "STATIC"}' http://localhost:8080/v1/service/test/ca2fff8e-d756-480c-b59e-8297ff88624b

# Get all registered services
$ curl -i http://localhost:8080/v1/service

# Get all nodes in 'test' service
$ curl -i http://localhost:8080/v1/service/test

# Get the node 'ca2fff8e-d756-480c-b59e-8297ff88624b' of the 'test' service
$ curl -i http://localhost:8080/v1/service/test/ca2fff8e-d756-480c-b59e-8297ff88624b


# Get the node 'ca2fff8e-d756-480c-b59e-8297ff88624b' of the 'test' service
$ curl -i -X DELETE http://localhost:8080/v1/service/test/ca2fff8e-d756-480c-b59e-8297ff88624b
</code></pre>

<p>As you must seen, the data structure is</p>

<p><em>ServiceInstance</em></p>

<pre><code>{
   "name": "test",
   "id": "ca2fff8e-d756-480c-b59e-8297ff88624b",
   "address": "10.20.30.40",
   "port": 1234,
   "payload": "From Test",
   "registrationTimeUTC": 1325129459728,
   "serviceType": "STATIC"
}
</code></pre>

<p><em>ServiceInstances</em></p>

<pre><code>[
    {
       "name": "test",
       "id": "ca2fff8e-d756-480c-b59e-8297ff88624b",
       "address": "10.20.30.40",
       "port": 1234,
       "payload": "From Test",
       "registrationTimeUTC": 1325129459728,
       "serviceType": "STATIC"
    },

    {
       "name": "foo",
       "id": "bd4fff8e-c234-480c-f6ee-8297ff813765",
       "address": "10.20.30.40",
       "sslPort": 1235,
       "payload": "foo-bar",
       "registrationTimeUTC": 1325129459728,
       "serviceType": "STATIC"
    }
]
</code></pre>

<p><em>ServiceNames</em></p>

<pre><code>[
    {
        "name": "foo"
    },

    {
        "name": "bar"
    }
]
</code></pre>

<h2 id="the-rest-client">The REST client<a href="#the-rest-client" class="anchor">#</a></h2>

<p>Once you are familiar with the REST interface, it's time to build the client. I did it in php, with great help of the Guzzle lib.</p>

<p>First of all, the package dependencies. I created a REST client and CLI interface, so there were my dependencies:</p>

<pre><code>{
    ...
    "require": {
        "php": "&gt;=5.3.3",
        "symfony/console": "~2.4",
        "guzzle/guzzle":"~3.7"
    },
    ...
}
</code></pre>

<p>The suricate client must expose the metods the REST interface encasulates, so it has to implement this 'interface':</p>

<pre><code>abstract public function getAllNames();

abstract public function getAll($service);

abstract public function get($service, $id);

abstract public function putService($service, $id, $node);

abstract public function removeService($service, $id);
</code></pre>

<p>My implementation of this 'interface' is <a href="https://github.com/kpacha/suricate-php-sdk/blob/master/src/Suricate.php">here</a>.</p>

<p>Whith your implementation, you'll be able to interact with the REST service discovering server easily</p>

<pre><code>$client = ... // instantiate your implementation

$success = $client-&gt;putService($serviceName, $nodeId, $node);
$serviceNames = $client-&gt;getAllNames();
$nodes = $client-&gt;getAll($serviceName);
$node = $client-&gt;get($serviceName, $nodeId);
$success = $client-&gt;removeService($serviceName, $nodeId);
</code></pre>

<p>The <a href="https://github.com/kpacha/suricate-php-sdk">suricate-php-sdk</a> also offers a set of commands to interact to de REST server through the CLI.</p>

<p>Coming soon: getting more from the sdk and integrating the service discovering with your local configuration</p>]]></content>
    </entry>
        <entry>
        <title>Solving sudoku puzzles with scala streams</title>
                <id>http://kpacha.github.io/2014/10/26/solving-sudoku-puzzles-with-scala-streams.html</id>
                <updated>2014-10-26T00:00:00+02:00</updated>
        <author>
            <name>kpacha</name>
            <email>kpacha666@gmail.com</email>
        </author>
        <link rel="alternate" type="text/html" href="http://kpacha.github.io/2014/10/26/solving-sudoku-puzzles-with-scala-streams.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Scala has a very nice lazy evaluation system, allowing you to defer a lot of evaluations to the last moment. This is a nice to have feature when you are dealing with 'almost-infinite' lists. There are some examples on the web but I wanted bigger trees to explore in order to see it working, so I went to sudoku.</p>

<h2 id="board-basics">Board basics<a href="#board-basics" class="anchor">#</a></h2>

<p>Before going any further on the solving algorithm, we need to define some values and types</p>

<pre><code>type Position = (Int, Int)              // the type to handle pairs of coordinates
val EmptyValue = '0'                    // the char representing the empty cells
val MaxValue = 9                        // the number of columns and rows

val allValues = "123456789".toList      // the list of all possible values of a cell
val indexes = (0 to 8).toList           // the list of column and row indexes
</code></pre>

<p>Now we can go with the <code>Board</code> class. This will be responsible for parsing the game and generate a list of the next possible 'movements'. First of all, let's look at the object initialization phase</p>

<pre><code>class Board(val game: String) {
    val empty = game indexOf EmptyValue
    val emptyPosition = (empty % MaxValue, empty / MaxValue)
    val isDone = empty == -1

    ...
}
</code></pre>

<p>Here we see that Board has a constructor param called <code>game</code>. On the object instantiation, it calculates the first empty position in the board. It also checks if the board is completed (when there are no more empty cells, we can assume the game is done).</p>

<p>Encapsulating the base info in a string allows us to manipulate it easily. It also allows us to override the <code>toString</code> method so the board will be displayed in a more human friendly way.</p>

<pre><code>override def toString: String = "\n" + (game sliding (MaxValue, MaxValue) mkString "\n")
</code></pre>

<p>Since our <code>Board</code> is based on a string definition of the game, we can add a function to create a new updated object with the same signature the <code>String</code> class exposes, so updating the <code>Board</code> will be as intuitive as updating the string that defines the object itself.</p>

<pre><code>def updated(pos: Int, value: Char): Board = new Board(game updated (pos, value))
</code></pre>

<p>The <code>Board</code> class must include some accessors to the cells it contains, so we must implement some getters by row, column and box (here, I'm calling each 3x3 block a box).</p>

<pre><code>def row(y: Int): List[Char] = indexes map (col =&gt; game(y * MaxValue + col))
def col(x: Int): List[Char] = indexes map (row =&gt; game(x + row * MaxValue))
def box(pos: Position): List[Char] = {
  def base(p: Int): Int = (p / 3) * 3

  val x0 = base(pos._1)
  val y0 = base(pos._2)
  val ys = (y0 until y0 + 3).toList
  (x0 until x0 + 3).toList.flatMap(x =&gt; ys.map(y =&gt; game(x + y * MaxValue)))
}
</code></pre>

<p>As you can see, in order to get the values of a row or a column we just map the indexes <code>[0,8]</code> with the corresponding values of the game. Getting the box values is more complex because the boundaries of the box must be calculated before extracting the values of the game.</p>

<h2 id="next-candidates">Next candidates<a href="#next-candidates" class="anchor">#</a></h2>

<p>The easiest way to get a list of all possible values of a cell is to join all the values already placed in the same row, column and box. So we need a function to calculate the values a cell should not contain</p>

<pre><code>def toAvoid(pos: Position): List[Char] = (col(pos._1) ++ row(pos._2) ++ box(pos)).distinct
</code></pre>

<p>and then, get the values not included in the <code>toAvoid</code> list</p>

<pre><code>def candidates(pos: Position): List[Char] = allValues diff toAvoid(pos)
</code></pre>

<p>It is interesting to note that if there is not a single candidate, it will return an empty list.</p>

<p>The main objectives of the <code>Board</code> class was to encapsulate the game info and generate a list of the next possible movements. The first part is done. Let's finish the other one with the <code>next</code> function. Here we want to create a new <code>Board</code> for each candidate it found but we want to defer they evaluation until the last moment. So, now is when <a href="http://www.scala-lang.org/api/2.11.2/index.html#scala.collection.immutable.Stream">streams</a> come to the rescue. A <code>Stream</code> defers the evaluation of the second param until it is required. By returning a <code>Stream[Board]</code> we avoid to instantiate every possible candidate until the code needs the next one to check if the game is finished or to ask for the next candidates.</p>

<pre><code>def next: Stream[Board] = candidates(emptyPosition).toStream map (c =&gt; updated(empty, c))
</code></pre>

<p>When it returns an empty <code>Stream</code>, you are done or you have some cell(s) wrong. Anyway, that is the way you know the path is finished.</p>

<p>At this moment, we are done with our <code>Board</code> class. Hurray!</p>

<h2 id="the-solver">The solver<a href="#the-solver" class="anchor">#</a></h2>

<p>Our <code>Sudoku</code> solver has to expose a board builder that instantiates our initial <code>Board</code>. Very straightforward task.</p>

<pre><code>def build(game: String): Board = new Board(game)
</code></pre>

<p>Time to create an almost infinite list of possible boards. We want to explore the tree efficiently, so we will use a breadth-first traversal algorithm. First, we emit the head, then we add its subnodes to the end of the list of nodes to explore and move to the next node of the level. When all the nodes in a level are checked, we move to the next one by inspecting the children of the first node of the already completed level.</p>

<p>Note we need to accept a list of boards in order to make the function recursive. This function will get the <code>head</code> of the <code>Stream</code> and then it will create a new <code>Stream</code> with that item and the result of the recursive call. The <code>Stream</code> passed to that recursive call is just the concatenation of the <code>tail</code> of the original <code>Stream</code> and the candidates returned by the <code>head</code>. Once the <code>tail</code> and the next candidates are empty, the path is finished.</p>

<pre><code>def from(path: Stream[Board]): Stream[Board] = path match {
    case h #:: t =&gt; h #:: from(t ++ h.next)
    case _ =&gt; Stream.empty
}
</code></pre>

<p>Due the way our <code>Board</code> class generates the candidate <code>Stream</code>, we can assume our list will contain just valid boards, mostly incomplete.</p>

<p>Now we have a builder and a candidate generator, we can put it together and generate a <code>Stream</code> of valid boards starting from the received game definition string.</p>

<pre><code>def steps(game: String): Stream[Board] = from(Stream(build(game)))
</code></pre>

<p>The last function we must implement is the one that filters the <code>Stream</code> looking for a solved board. That is why we created the <code>isDone</code> val.</p>

<pre><code>def solve(game: String): Board = steps(game).filter(_.isDone).head
</code></pre>

<p>And we are done! Our solver will just evaluate the minimun steps required to get the first solved board.</p>

<h2 id="further-optimizations">Further optimizations<a href="#further-optimizations" class="anchor">#</a></h2>

<p>In order to avoid some repetitive calculations, it is possible to create a map with the positions a box contains out of the <code>Board</code> class and change the <code>box</code> function to get it filtering the game values with the precalculated map.</p>

<pre><code>val boxCoordinates = (0 to 2).toList

def box(pos: Int): List[Int] = {
    def base(p: Int): Int = (p / 3) * 3

    val x0 = base(getX(pos))
    val y0 = base(getY(pos))
    val ys = (y0 until y0 + 3).toList
    (x0 until x0 + 3).toList.flatMap(x =&gt; ys.map(x + _ * 9))
}

val boxes = boxCoordinates flatMap (x =&gt; boxCoordinates map (x * 3 + _ * 3 * 9)) map box

class Board(val game: String) {
    ...
    def box(pos: Int): List[Char] = (boxes filter (_ contains pos)).head map game
    ...
}
</code></pre>

<p>The complete code is availbe as a <a href="https://gist.github.com/kpacha/adeda0bd7a08076d67d0">gist</a>;</p>]]></content>
    </entry>
    </feed>
